kind: job
metadata:
  name: describe
  tag: ''
  hash: c6c09832096f560ba97db375a40dc3ceb7fb3bf7
  project: ''
  labels:
    author: Davids
  categories:
  - data-analysis
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/davesh0812/functions.git#8d4ad13e3b3001f9dfc679b537f59b1b11ccf4fb:/Users/davids/Projects/functions/describe/describe.py
    origin_filename: /Users/davids/Projects/functions/describe/describe.py
  entry_points:
    analyze:
      name: analyze
      doc: 'The function will output the following artifacts per

        column within the data frame (based on data types)

        If the data has more than 500,000 sample we

        sample randomly 500,000 samples:


        describe csv

        histograms

        scatter-2d

        violin chart

        correlation-matrix chart

        correlation-matrix csv

        imbalance pie chart

        imbalance-weights-vec csv'
      parameters:
      - name: context
        type: MLClientCtx
        doc: The function context
        default: ''
      - name: name
        type: str
        doc: Key of dataset to database ("dataset" for default)
        default: dataset
      - name: table
        type: Union[FeatureSet, DataItem]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or FeatureSet
          as param
        default: null
      - name: label_column
        type: str
        doc: Ground truth column label
        default: null
      - name: plots_dest
        type: str
        doc: Destination folder of summary plots (relative to artifact_path) ("plots"
          for default)
        default: plots
      - name: random_state
        type: int
        doc: When the table has more than 500,000 samples, we sample randomly 500,000
          samples
        default: 1
      - name: problem_type
        type: str
        default: classification
      - name: dask_key
        type: str
        doc: Key of dataframe in dask client "datasets" attribute
        default: dask_key
      - name: dask_function
        type: str
        doc: Dask function url (db://..)
        default: null
      - name: dask_client
        doc: Dask client object
        default: null
      outputs:
      - default: ''
      lineno: 29
  description: describe and visualizes dataset stats
  default_handler: analyze
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
verbose: false
